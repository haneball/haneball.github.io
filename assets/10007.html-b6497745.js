const n=JSON.parse('{"key":"v-7b06b7d2","path":"/posts/js/10007.html","title":"实现几种数据结构","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"实现几种数据结构","category":["TypeScript"],"tag":["数据结构"],"order":7,"description":"链表 class ListNode { val: number next: ListNode | null constructor(val: number = 0, next: ListNode | null = null) { this.val = val this.next = next } }","head":[["meta",{"property":"og:url","content":"https://haneball.github.io/posts/js/10007.html"}],["meta",{"property":"og:site_name","content":"haneball Blog"}],["meta",{"property":"og:title","content":"实现几种数据结构"}],["meta",{"property":"og:description","content":"链表 class ListNode { val: number next: ListNode | null constructor(val: number = 0, next: ListNode | null = null) { this.val = val this.next = next } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-02-09T13:49:08.000Z"}],["meta",{"property":"article:author","content":"haneball"}],["meta",{"property":"article:tag","content":"数据结构"}],["meta",{"property":"article:modified_time","content":"2024-02-09T13:49:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"实现几种数据结构\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-02-09T13:49:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"haneball\\",\\"url\\":\\"https://haneball.github.io\\"}]}"]]},"headers":[{"level":2,"title":"链表","slug":"链表","link":"#链表","children":[]},{"level":2,"title":"二叉树","slug":"二叉树","link":"#二叉树","children":[]},{"level":2,"title":"优先队列（堆）","slug":"优先队列-堆","link":"#优先队列-堆","children":[]}],"git":{"createdTime":1705414872000,"updatedTime":1707486548000,"contributors":[{"name":"haneball","email":"dendro@yeah.net","commits":5}]},"readingTime":{"minutes":0.98,"words":294},"filePathRelative":"posts/js/10007.md","localizedDate":"2024年1月16日","excerpt":"<h2> 链表</h2>\\n<div class=\\"language-typescript line-numbers-mode\\" data-ext=\\"ts\\"><pre class=\\"language-typescript\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">ListNode</span> <span class=\\"token punctuation\\">{</span>\\n    val<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span>\\n    next<span class=\\"token operator\\">:</span> ListNode <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span>\\n\\n    <span class=\\"token function\\">constructor</span><span class=\\"token punctuation\\">(</span>val<span class=\\"token operator\\">:</span> <span class=\\"token builtin\\">number</span> <span class=\\"token operator\\">=</span> <span class=\\"token number\\">0</span><span class=\\"token punctuation\\">,</span> next<span class=\\"token operator\\">:</span> ListNode <span class=\\"token operator\\">|</span> <span class=\\"token keyword\\">null</span> <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>val <span class=\\"token operator\\">=</span> val\\n        <span class=\\"token keyword\\">this</span><span class=\\"token punctuation\\">.</span>next <span class=\\"token operator\\">=</span> next\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
